// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	localities "github.com/emidioreb/mercado-fresco-lerigophers/internal/localities"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateLocality provides a mock function with given fields: id, localityName, provinceName, countryName
func (_m *Repository) CreateLocality(id string, localityName string, provinceName string, countryName string) (localities.Locality, error) {
	ret := _m.Called(id, localityName, provinceName, countryName)

	var r0 localities.Locality
	if rf, ok := ret.Get(0).(func(string, string, string, string) localities.Locality); ok {
		r0 = rf(id, localityName, provinceName, countryName)
	} else {
		r0 = ret.Get(0).(localities.Locality)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(id, localityName, provinceName, countryName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOne provides a mock function with given fields: id
func (_m *Repository) GetOne(id string) (localities.Locality, error) {
	ret := _m.Called(id)

	var r0 localities.Locality
	if rf, ok := ret.Get(0).(func(string) localities.Locality); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(localities.Locality)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReportSellers provides a mock function with given fields: localityId
func (_m *Repository) GetReportSellers(localityId string) ([]localities.ReportSellers, error) {
	ret := _m.Called(localityId)

	var r0 []localities.ReportSellers
	if rf, ok := ret.Get(0).(func(string) []localities.ReportSellers); ok {
		r0 = rf(localityId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]localities.ReportSellers)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(localityId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

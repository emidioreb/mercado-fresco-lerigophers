// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	products "github.com/emidioreb/mercado-fresco-lerigophers/internal/products"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: productCode, description, width, height, length, netWeight, expirationRate, recommendedFreezingTemperaturechan, freezingRate, productTypeId, sellerId
func (_m *Repository) Create(productCode string, description string, width float64, height float64, length float64, netWeight float64, expirationRate float64, recommendedFreezingTemperaturechan float64, freezingRate float64, productTypeId int, sellerId int) (products.Product, error) {
	ret := _m.Called(productCode, description, width, height, length, netWeight, expirationRate, recommendedFreezingTemperaturechan, freezingRate, productTypeId, sellerId)

	var r0 products.Product
	if rf, ok := ret.Get(0).(func(string, string, float64, float64, float64, float64, float64, float64, float64, int, int) products.Product); ok {
		r0 = rf(productCode, description, width, height, length, netWeight, expirationRate, recommendedFreezingTemperaturechan, freezingRate, productTypeId, sellerId)
	} else {
		r0 = ret.Get(0).(products.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, float64, float64, float64, float64, float64, float64, float64, int, int) error); ok {
		r1 = rf(productCode, description, width, height, length, netWeight, expirationRate, recommendedFreezingTemperaturechan, freezingRate, productTypeId, sellerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *Repository) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *Repository) GetAll() ([]products.Product, error) {
	ret := _m.Called()

	var r0 []products.Product
	if rf, ok := ret.Get(0).(func() []products.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]products.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOne provides a mock function with given fields: id
func (_m *Repository) GetOne(id int) (products.Product, error) {
	ret := _m.Called(id)

	var r0 products.Product
	if rf, ok := ret.Get(0).(func(int) products.Product); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(products.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReportProduct provides a mock function with given fields: ProductId
func (_m *Repository) GetReportProduct(ProductId int) ([]products.ProductsQuantity, error) {
	ret := _m.Called(ProductId)

	var r0 []products.ProductsQuantity
	if rf, ok := ret.Get(0).(func(int) []products.ProductsQuantity); ok {
		r0 = rf(ProductId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]products.ProductsQuantity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(ProductId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, requestData
func (_m *Repository) Update(id int, requestData map[string]interface{}) (products.Product, error) {
	ret := _m.Called(id, requestData)

	var r0 products.Product
	if rf, ok := ret.Get(0).(func(int, map[string]interface{}) products.Product); ok {
		r0 = rf(id, requestData)
	} else {
		r0 = ret.Get(0).(products.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, map[string]interface{}) error); ok {
		r1 = rf(id, requestData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

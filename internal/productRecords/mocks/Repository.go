// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	product_records "github.com/emidioreb/mercado-fresco-lerigophers/internal/productRecords"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateProductRecord provides a mock function with given fields: LastUpdateDate, PurchasePrice, SalePrice, ProductId
func (_m *Repository) CreateProductRecord(LastUpdateDate string, PurchasePrice float64, SalePrice float64, ProductId int) (product_records.ProductRecords, error) {
	ret := _m.Called(LastUpdateDate, PurchasePrice, SalePrice, ProductId)

	var r0 product_records.ProductRecords
	if rf, ok := ret.Get(0).(func(string, float64, float64, int) product_records.ProductRecords); ok {
		r0 = rf(LastUpdateDate, PurchasePrice, SalePrice, ProductId)
	} else {
		r0 = ret.Get(0).(product_records.ProductRecords)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, float64, float64, int) error); ok {
		r1 = rf(LastUpdateDate, PurchasePrice, SalePrice, ProductId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

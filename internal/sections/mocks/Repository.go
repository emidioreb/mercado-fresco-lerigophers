// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	sections "github.com/emidioreb/mercado-fresco-lerigophers/internal/sections"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: sectionNumber, currentTemperature, minimumTemperature, currentCapacity, mininumCapacity, maximumCapacity, warehouseId, productTypeId
func (_m *Repository) Create(sectionNumber int, currentTemperature int, minimumTemperature int, currentCapacity int, mininumCapacity int, maximumCapacity int, warehouseId int, productTypeId int) (sections.Section, error) {
	ret := _m.Called(sectionNumber, currentTemperature, minimumTemperature, currentCapacity, mininumCapacity, maximumCapacity, warehouseId, productTypeId)

	var r0 sections.Section
	if rf, ok := ret.Get(0).(func(int, int, int, int, int, int, int, int) sections.Section); ok {
		r0 = rf(sectionNumber, currentTemperature, minimumTemperature, currentCapacity, mininumCapacity, maximumCapacity, warehouseId, productTypeId)
	} else {
		r0 = ret.Get(0).(sections.Section)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, int, int, int, int, int, int) error); ok {
		r1 = rf(sectionNumber, currentTemperature, minimumTemperature, currentCapacity, mininumCapacity, maximumCapacity, warehouseId, productTypeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *Repository) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *Repository) GetAll() ([]sections.Section, error) {
	ret := _m.Called()

	var r0 []sections.Section
	if rf, ok := ret.Get(0).(func() []sections.Section); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sections.Section)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBySectionNumber provides a mock function with given fields: sectionNumber
func (_m *Repository) GetBySectionNumber(sectionNumber int) (int, error) {
	ret := _m.Called(sectionNumber)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(sectionNumber)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(sectionNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOne provides a mock function with given fields: id
func (_m *Repository) GetOne(id int) (sections.Section, error) {
	ret := _m.Called(id)

	var r0 sections.Section
	if rf, ok := ret.Get(0).(func(int) sections.Section); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(sections.Section)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, requestData
func (_m *Repository) Update(id int, requestData map[string]interface{}) (sections.Section, error) {
	ret := _m.Called(id, requestData)

	var r0 sections.Section
	if rf, ok := ret.Get(0).(func(int, map[string]interface{}) sections.Section); ok {
		r0 = rf(id, requestData)
	} else {
		r0 = ret.Get(0).(sections.Section)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, map[string]interface{}) error); ok {
		r1 = rf(id, requestData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

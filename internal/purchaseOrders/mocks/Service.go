// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	time "time"

	purchase_orders "github.com/emidioreb/mercado-fresco-lerigophers/internal/purchaseOrders"
	mock "github.com/stretchr/testify/mock"

	web "github.com/emidioreb/mercado-fresco-lerigophers/pkg/web"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreatePurchaseOrders provides a mock function with given fields: OrderNumber, OrderDate, TrackingCode, BuyerId, ProductRecordId, OrderStatusId
func (_m *Service) CreatePurchaseOrders(OrderNumber string, OrderDate time.Time, TrackingCode string, BuyerId int, ProductRecordId int, OrderStatusId int) (purchase_orders.PurchaseOrders, web.ResponseCode) {
	ret := _m.Called(OrderNumber, OrderDate, TrackingCode, BuyerId, ProductRecordId, OrderStatusId)

	var r0 purchase_orders.PurchaseOrders
	if rf, ok := ret.Get(0).(func(string, time.Time, string, int, int, int) purchase_orders.PurchaseOrders); ok {
		r0 = rf(OrderNumber, OrderDate, TrackingCode, BuyerId, ProductRecordId, OrderStatusId)
	} else {
		r0 = ret.Get(0).(purchase_orders.PurchaseOrders)
	}

	var r1 web.ResponseCode
	if rf, ok := ret.Get(1).(func(string, time.Time, string, int, int, int) web.ResponseCode); ok {
		r1 = rf(OrderNumber, OrderDate, TrackingCode, BuyerId, ProductRecordId, OrderStatusId)
	} else {
		r1 = ret.Get(1).(web.ResponseCode)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
